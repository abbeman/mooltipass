#!/usr/bin/python2
import wx

class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        super(MyFrame, self).__init__(parent, title = title)
        self.SetBackgroundColour("#000000")
        mainSizer = wx.GridBagSizer(0, 0)
        self.SetSizer(mainSizer)

        mainSizer.Add(self.createButton(50, 30, "button1"), pos = (1, 0), flag = wx.SHAPED | wx.ALL | wx.ALIGN_CENTER_VERTICAL)
        touchPad = TouchPad(self, (100, 100))
        touchPad.Bind(wx.EVT_LEFT_DOWN, self.onTouchPadPress)
        touchPad.Bind(wx.EVT_LEFT_UP, self.onTouchPadRelease)
        touchPad.Bind(wx.EVT_MOTION, self.onTouchPadMotion)
        mainSizer.Add(touchPad, pos = (0, 1), span = (3, 3), flag = wx.SHAPED | wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL)
        mainSizer.Add(self.createButton(50, 30, "button2"), pos = (1, 4), flag = wx.SHAPED | wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL)

        for i in range(3):
            mainSizer.AddGrowableRow(i)
        for i in range(5):
            mainSizer.AddGrowableCol(i)

        self.SetClientSize((400, 200))

    def createButton(self, width, height, name):
        button = Button(self, (width, height), name)
        button.Bind(wx.EVT_LEFT_DOWN, self.onButtonPress)
        button.Bind(wx.EVT_LEFT_UP, self.onButtonRelease)
        return button

    def onTouchPadPress(self, ev):
        width, height = ev.GetEventObject().GetClientSize()
        x, y = ev.GetPosition()
        print("Touch pad pressed: %.2f, %.2f" % (float(x)/width, float(y)/height))
        ev.Skip()

    def onTouchPadRelease(self, ev):
        width, height = ev.GetEventObject().GetClientSize()
        x, y = ev.GetPosition()
        print("Touch pad released: %.2f, %.2f" % (float(x)/width, float(y)/height))
        ev.Skip()

    def onTouchPadMotion(self, ev):
        if not ev.LeftIsDown():
            return

        width, height = ev.GetEventObject().GetClientSize()
        x, y = ev.GetPosition()
        print("Touch pad motion: %.2f, %.2f" % (float(x)/width, float(y)/height))
        ev.Skip()

    def onButtonPress(self, ev):
        print("Button '%s' pressed!" % ev.GetEventObject().GetName())
        # Make sure the original event handler is called too, which highlights
        # the button while pressed.
        ev.Skip()

    def onButtonRelease(self, ev):
        print("Button '%s' released!" % ev.GetEventObject().GetName())
        # Make sure the original event handler is called too, which highlights
        # the button while pressed.
        ev.Skip()

class TouchSpot:
    FADE_STEP_COUNT = 10

    def __init__(self, point = None):
        self.position = point
        self.fadeState = self.FADE_STEP_COUNT-1

    def update(self):
        if self.fadeState >= 0:
            self.fadeState -= 1

        # There are still more fade steps to go, return True.
        if self.fadeState > 0:
            return True

        return False

class TouchPad(wx.Control):
    TIMER_INTERVAL = 100

    def __init__(self, parent, size):
        self._aspect = 1
        wx.Window.__init__(self, parent=parent, size=size)
        self.spots = []

        self.Bind(wx.EVT_PAINT, self.onPaint)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.onEraseBackground)

        self.Bind(wx.EVT_LEFT_DOWN, self.onPress)
        self.Bind(wx.EVT_LEFT_DCLICK, self.onPress)
        self.Bind(wx.EVT_MOTION, self.onMotion)
        self.Bind(wx.EVT_SIZE, self.onSizeChange)

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onUpdateSpotsEvent)
        self.timer.Start(self.TIMER_INTERVAL)

    def addSpot(self, position):
        self.spots.append(TouchSpot(position))
        if not self.timer.IsRunning():
            self.timer.Start(self.TIMER_INTERVAL)
        self.Refresh()

    def onUpdateSpotsEvent(self, ev):
        self.updateTouchSpots()

    def updateTouchSpots(self):
        # Loop through the spots backwards, since we'll be removing spots.
        for i in range(len(self.spots)-1, -1, -1):
            spot = self.spots[i]
            if not spot.update():
                self.spots.remove(spot)

        self.Refresh()

        if self.timer.IsRunning() and len(self.spots) <= 0:
            self.timer.Stop()

    def onPress(self, ev):
        self.addSpot(ev.GetPosition())

    def onMotion(self, ev):
        if not ev.LeftIsDown():
            return

        self.addSpot(ev.GetPosition())

    def onPaint(self, ev):
        self.paintTouchPad()

    def onSizeChange(self, ev):
        self.Refresh()

    def paintTouchPad(self):
        dc = wx.BufferedPaintDC(self)
        width, height = self.GetClientSize()
        dc.SetBackground(wx.Brush("#000000"))
        dc.SetBrush(wx.Brush("#000000", wx.TRANSPARENT))
        dc.Clear()

        for i in range(len(self.spots)):
            spot = self.spots[i]
            color = wx.Colour(0x55 / TouchSpot.FADE_STEP_COUNT * spot.fadeState,
                              0x55 / TouchSpot.FADE_STEP_COUNT * spot.fadeState,
                              0xec / TouchSpot.FADE_STEP_COUNT * spot.fadeState)
            dc.SetPen(wx.Pen(color, 3, wx.SOLID))
            if i < len(self.spots)-1:
                nextSpot = self.spots[i+1]
                dc.DrawLine(spot.position.x, spot.position.y, nextSpot.position.x, nextSpot.position.y)
            else:
                dc.DrawPoint(spot.position.x, spot.position.y)

        # Draw the arcs making up the broken circle highlight of the front
        # panel.
        r = height/2 - height/15
        cx = width/2
        cy = height/2
        arcWidth = 5
        arcGap = width/30
        pen = wx.Pen("#4545dc", arcWidth, wx.SOLID)
        pen.SetCap(wx.CAP_BUTT)
        dc.SetPen(pen)
        # Draw top right arc.
        dc.DrawArc(cx + r, cy - arcGap, cx + arcGap, cy - r, cx, cy)
        # Draw top left arc.
        dc.DrawArc(cx - arcGap, cy - r, cx - r, cy - arcGap, cx, cy)
        # Draw bottom left arc.
        dc.DrawArc(cx - r, cy + arcGap, cx - arcGap, cy + r, cx, cy)
        # Draw bottom right arc.
        dc.DrawArc(cx + arcGap, cy + r, cx + r, cy + arcGap, cx, cy)


    def onEraseBackground(self, ev):
        pass


class Button(wx.Control):
    NORMAL = 0
    HOVER = 1
    CLICK = 2
    STYLE_COUNT = 3
    def __init__(self, parent, size, name = ""):
        self._aspect = 1.5
        wx.Window.__init__(self, parent=parent, size=size, name=name)
        self.initializeBitmaps()

        self.Bind(wx.EVT_PAINT, self.onPaint)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.onEraseBackground)
        self.Bind(wx.EVT_LEFT_DOWN, self.onPress)
        self.Bind(wx.EVT_LEFT_DCLICK, self.onPress)
        self.Bind(wx.EVT_LEFT_UP, self.onRelease)

        self.Bind(wx.EVT_ENTER_WINDOW, self.onEnter)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.onLeave)
        self.Bind(wx.EVT_SIZE, self.onSizeChange)

        self.state = self.NORMAL

    def onEnter(self, ev):
        self.state = self.HOVER
        self.Refresh()

    def onLeave(self, ev):
        self.state = self.NORMAL
        self.Refresh()

    def onPaint(self, ev):
        self.paintButton()

    def paintButton(self):
        dc = wx.BufferedPaintDC(self)
        width, height = self.GetClientSize()
        srcDC = wx.MemoryDC()
        srcDC.SelectObject(self.bitmaps[self.state])
        dc.Blit(0, 0, width, height, srcDC, 0, 0)

    def onEraseBackground(self, ev):
        pass

    def onPress(self, ev):
        self.state = self.CLICK
        self.Refresh()

    def onRelease(self, ev):
        if self.state == self.CLICK:
            self.state = self.HOVER
        self.Refresh()

    def onSizeChange(self, ev):
        self.initializeBitmaps()
        self.Refresh()

    def initializeBitmaps(self):
        width, height = self.GetClientSize()
        self.bitmaps = []
        while len(self.bitmaps) < self.STYLE_COUNT:
            self.bitmaps.append(None)
        self.bitmaps[self.NORMAL] = wx.EmptyBitmap(width, height)
        self.bitmaps[self.HOVER]  = wx.EmptyBitmap(width, height)
        self.bitmaps[self.CLICK]  = wx.EmptyBitmap(width, height)

        lineOffset = width/6
        lineWidth = 5

        rect = wx.Rect(0, 0, width, height)
        # Normal button.
        dc = wx.MemoryDC()
        dc.SelectObject(self.bitmaps[self.NORMAL])
        dc.SetBrush(wx.Brush("#000000"))
        dc.SetPen(wx.Pen("#000000", 0, wx.TRANSPARENT))
        dc.DrawRectangleRect(rect)
        pen = wx.Pen("#4545dc", lineWidth, wx.SOLID)
        pen.SetCap(wx.CAP_BUTT)
        dc.SetPen(pen)
        dc.DrawLine(lineOffset, lineOffset, width-lineOffset-lineWidth/2, lineOffset)

        # Hovered button.
        dc = wx.MemoryDC()
        dc.SelectObject(self.bitmaps[self.HOVER])
        dc.SetBrush(wx.Brush("#101040"))
        dc.SetPen(wx.Pen("#000000", 0, wx.TRANSPARENT))
        dc.DrawRectangleRect(rect)
        pen = wx.Pen("#4545dc", lineWidth, wx.SOLID)
        pen.SetCap(wx.CAP_BUTT)
        dc.SetPen(pen)
        dc.DrawLine(rect.x + lineOffset, rect.y + lineOffset, rect.x + rect.width-lineOffset-lineWidth/2, rect.y + lineOffset)

        # Clicked button.
        dc = wx.MemoryDC()
        dc.SelectObject(self.bitmaps[self.CLICK])
        dc.SetBrush(wx.Brush("#23235e"))
        dc.SetPen(wx.Pen("#000000", 0, wx.TRANSPARENT))
        dc.DrawRectangleRect(rect)
        pen = wx.Pen("#4545dc", lineWidth, wx.SOLID)
        pen.SetCap(wx.CAP_BUTT)
        dc.SetPen(pen)
        dc.DrawLine(rect.x + lineOffset, rect.y + lineOffset, rect.x + rect.width-lineOffset-lineWidth/2, rect.y + lineOffset)

app = wx.App()

frame = MyFrame(None, 'Mooltipass GUI')

frame.Show()

app.MainLoop()
